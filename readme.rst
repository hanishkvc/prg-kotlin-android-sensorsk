###########
SensorsK
###########

Author: HanishKVC, 2022

Version: v20230103IST1121

License: GPL3+


Overview
##########

Allows one to get the list of sensors in a android device and inturn select
one of them for monitoring live in GUI, as well as log into a csv file for
later analysis.

Parallely the GPS location info is also saved into the csv file.

Android app color codes upto 3 parameters wrt any given sensor with R, G, B.
However if there are more than 3 parameters being monitored/provided by a
sensor, then it will plot the remaining parameters with black color.

One can switch between sensors if required. At any given time, currently,
only one sensor can be selected. The csv file will contain sensor data wrt
all the sensors selected, for the duration for which they were selected
respectively.

There is also a python helper script to plot the captured sensor data. If
the user had switched sensors in a given run of the android app, then the
csv file would have data about multiple sensors, the logic will plot data
wrt each sensor seperately. It also prints some useful summary wrt data in
the console. A image is captured wrt data plot under /tmp/pyplotdata.png

Misc: A long time back, I vaguely remember there being a google's android app
for monitoring sensors in a android device or so, however now I am not able to
find/recall the same, so created this, for some experimentation I was doing.

Images
=======

.. image:: data/20230103_Screenshot_SensorK.png
   :alt: A screen capture of the SensorK android app

.. image:: data/pyplotdata.png
   :alt: The plot generated by the python helper script, providing a window into each sensor data captured.


App (Android version) Usage
#############################

The android program is currently programmed to work in potrait mode. Ideally
the program should always remain in potrait mode. However for some reason,
if it keeps changing orientation on your device, remember to disable auto
screen rotation on your device settings.

Sampling Rate
==============

The program by default hints Android to capture the sensor data at a low
sampling rate, to help with power consumption as well as to help with keeping
the amount of data captured by default to be a minimum. However when device
moment is detected, android may, based on kind of movement, switch to a high
sampling rate for some inbetween periods.

The time related status line as part of the sensor summary text data,
indicates the relative time delta between sensor events, in the order of
min, avg and max in terms of milliseconds.


Plot
======

Each captured sensor data event corresponds to one entry along the x-axis.
By default the available data set is auto scaled/expanded along the x-axis,
if the number of data records is less than the number of pixels on the screen
along xaxis.

Y-axis plots the sensed value wrt all the parameters captured by the sensor.
The y-axis is autoscaled based on the min and max value seen in the captured
data across all the fields/parameters.

The logic uses the withTransform to apply scaling and translation wrt all
points of data in a transparent and straight forward way.

CSV file
==========

THe logic by default saves/logs sensor data into csv file, at a granularity
of 1000+ records. The saving to csv is triggered in the background as a
parallel activity, which runs once every 5 seconds or so, so one needs to
wait for atleast 7-10 seconds after 1000+ records have been captured, for
the same to get written to the csv file, just to be on safe side. IE before
going back or switching sensors.

NOTE: One can look at the sensor details including data related details
which also contains how many samples have been captured, in the sensor
data section in the bottom 1/3rd of the screen, by scrolling wrt sensor
and its data summary details.

One will see the plot in the screen change, as the background save to csv
logic saves the data and clears the in memory buffer. Wait for few seconds
after the plot in the screen changes, before switching sensors or going
back (and inturn thus clearing the sensor selection).

The CSV file is maintained in the external/emulated storage area alloted
for the android application wrt its files.


GUI Interaction
=================

Double tapping the Plot area toggles between FullScreen and inbetween mode
wrt the plot.

Pressing back button, when a sensor is already selected, will clear the
sensor selection. Pressing back button once again will quit the app.

When user reselects the same(again)/different sensor, it takes care of reseting
the auto scaling wrt y axis to start afresh.


Python helper script
######################

Currently as the Android sensor data capture dont support a fixed sampling
rate, and it can switch between low and high sampling rates, a fft of the
captured sample data is not done. NOTE: One can use the timestamp info
stored with each record entry, to get the sample rate wrt adjacent samples,
as well as on average over a given window of data.

